COMP_KERNEL
N=100
n=50
step=(5+5)/n
Xtrain=np.array((np.random.uniform(-3,3,N),np.random.uniform(-3,3,N))).reshape(-1,2)
Ytrain=np.sin(Xtrain[:,0]) + Xtrain[:,1]
Xpredict=np.mgrid[-5:5:step,-5:5:step].reshape(2,n**2).T 
params=[np.array((1.,1.)),np.array((0.,0.))]
bounds=[(0.0001,10.),(0.0001,10.),(0.0001,10.),(0.0001,10.)]
comp_kernel=gp.Comp_Kernel(gp.sqexp,gp.sqexp,'kern_prod')#or put 'kern_sum'
a=gp.GP(comp_kerne,opt="fmin_l_bfgs_b",n_rest_opt = 2,Comp_Kernel=True)
a.add_training(Xtrain,Ytrain,params,bounds)
f=a.predict(Xpredict,plot=False,n=1)
fig=plt.figure()
ax=fig.gca(projection='3d')
surf=ax.scatter(Xpredict[:,0],Xpredict[:,1],f)
surf1=ax.scatter(Xtrain[:,0],Xtrain[:,1],Ytrain.reshape(N,1))
plt.show()



